import org.ajoberstar.gradle.git.tasks.*

buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath group: 'org.ajoberstar', name: 'gradle-git', version: config.plugin.git.version
    }
}

apply plugin: 'signing'
apply plugin: 'maven-publish'
apply plugin: 'maven'

artifacts {
    archives jar
    archives sourceJar
    archives javadocJar
}

publishing {
    publications {
        main(MavenPublication) {
            from components.java

            artifact source: sourceJar,  classifier: 'sources'
            artifact source: javadocJar, classifier: 'javadoc'

            pom.withXml {
                asNode().children().last() + getPomConfiguration()
            }
        }
    }
    repositories {
        mavenLocal()
        if (config.containsKey('sonatype')) {
            maven {
                url config.sonatype.url
                credentials {
                    username = System.properties['sonatype.username']
                    password = System.properties['sonatype.password']
                }
            }
        }
    }
}

signing {
    sign configurations.archives
    required { !project.ext.isSnapshot && gradle.taskGraph.hasTask("publish") }
}

task tagVersion(type: GitTag) {
    tagName = version
    message = "Release of v${version}."
    // sign = true // JGit doesn't support signing yet
    doLast {
        println sprintf('A new version %s has been tagged.', tagName)
    }
}

/*
task install {
    dependsOn ':publishMainPublicationToMavenLocalRepository'
}
*/

task release {
    dependsOn tagVersion, /*publish*/ uploadArchives
}

tasks.publish.mustRunAfter tagVersion


/**
 * Create POM config and return for use by other tasks.
 */
def getPomConfiguration() {
    def scmCfg = config.scm
    def repo = sprintf('%s/%s', scmCfg.username, scmCfg.repo.name)

    return {
        name project.name
        description project.description
        url sprintf(scmCfg.repo.url, repo)
        inceptionYear '2013'
        packaging 'jar'
        licenses {
            license {
                name config.license.name
                url config.license.url
                distribution 'repo'
            }
        }
        scm {
            url sprintf(scmCfg.repo.url, repo)
            connection 'scm:git:' + sprintf(scmCfg.remote.url.fetch, repo)
            developerConnection 'scm:git:' + sprintf(scmCfg.remote.url.push, repo)
        }
        developers {
            developer {
                id 'esycat'
                name 'Eugene Janusov'
                email 'esycat@gmail.com'
            }
        }
        organization {
            name 'Persic Entertainment'
        }
    }
}

uploadArchives {
    repositories.mavenDeployer {
        if (config.containsKey('sonatype')) {
            repository(url: config.sonatype.url) {
                authentication(
                    userName: System.properties['sonatype.username'],
                    password: System.properties['sonatype.password']
                )
            }
        }
        pom.project getPomConfiguration()
        beforeDeployment { signing.signPom it }
    }
}

install.repositories.mavenInstaller {
    pom.project getPomConfiguration()
}

task pom << {
    pom {
        project getPomConfiguration()
    }.writeTo(mavenPomDir.toString() + '/pom.xml')
}
