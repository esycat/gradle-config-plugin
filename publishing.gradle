apply plugin: 'signing'
//apply plugin: 'maven-publish'

/*
publishing {
	repositories {
        maven {
            url "file://$buildDir/repo" // change to point to your repo, e.g. http://my.org/repo
        }
    }
    publications {
        maven {
            withXml {
            	asNode().appendNode('description', 'A demonstration of maven pom customisation')
            }
        }
    }
}
*/

/**
 * Create POM config and return for use by other tasks.
 */
def getPomConfiguration() {
    return {
        name project.name
        description project.description
        url 'https://github.com/esycat/gradle-props-util'
        inceptionYear '2013'
        packaging 'jar'
        licenses {
            license {
                name 'The Apache Software License, Version 2.0'
                url 'http://apache.org/licenses/LICENSE-2.0'
                distribution 'repo'
            }
        }
        developers {
            developer {
                id 'esycat'
                name 'Eugene Janusov'
                email 'esycat@gmail.com'
            }
        }
        organization {
            name 'Persic Entertainment'
        }
        scm {
            url 'https://github.com/esycat/gradle-props-util'
            connection 'scm:git:git@github.com:esycat/gradle-props-util.git'
            developerConnection 'scm:git:git@github.com:esycat/gradle-props-util.git'
        }
    }
}

task sourceJar(type: Jar) {
    from sourceSets.main.allSource
    classifier = 'sources'
}

task groovydocJar(type: Jar) {
    from groovydoc
    classifier = 'javadoc'
}

artifacts {
    archives sourceJar, groovydocJar
}

uploadArchives {
    def sonatypeUrl = 'https://oss.sonatype.org/service/local/staging/deploy/maven2'
    repositories.mavenDeployer {
        repository(url: sonatypeUrl) {
            authentication(
                userName: System.properties['sonatype.username'],
                password: System.properties['sonatype.password']
            )
        }
        pom.project getPomConfiguration()
        beforeDeployment { signing.signPom it }
    }
}

install.repositories.mavenInstaller {
    pom.project getPomConfiguration()
}

task pom << {
    pom {
        project getPomConfiguration()
    }.writeTo(mavenPomDir.toString() + '/pom.xml')
}
